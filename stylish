#!/usr/bin/env php
<?php

/********************************
		InstanceManager
********************************/
class InstanceManager
{

}

/********************************
		Process
********************************/
class Process
{
	public function run()
	{

	}

	public function kill()
	{
		
	}
}

/********************************
		Command
********************************/
abstract class Command
{
	public $directives;

	static $keyword;

	public function __construct($directives)
	{
		$this->directives = $directives;
	}

	private static function pattern()
	{
		return '/'.static::$keyword.'/';
	}
	
	public static function detect($arg)
	{
		return (preg_match(static::pattern(), $arg));
	}
}

class WatchCommand extends Command
{
	static $keyword = 'watch';
}

class ListCommand extends Command
{
	static $keyword = 'list';
}

class StopCommand extends Command
{
	static $keyword = 'stop';
}

array_shift($argv);

$command = $argv[0];

array_shift($argv);

$directives = $argv;

$watch = WatchCommand::detect($command);
$list = ListCommand::detect($command);
$stop = StopCommand::detect($command);

if ($watch) {
	$watch = new WatchCommand($directives);
} else if ($list || $stop) {

}

?>
